"""
@modified: 04/08/24
@main_dev: Hugues Herrmann
"""

### ========== Variables ========== ###
# Mandatory
DESIGN = config["design"]
SAMPLE_ID = config["sample_id"]
OUT_DIR = config["out_dir"]


### ========== Rules ========== ###
rule all:
    input:
        coding_counts = OUT_DIR + COHORT + "/DEG/coding_counts_" + COHORT + ".tsv"
        

rule count_pass_mutations:
    input:
        mutect2 = expand()
    output:
        coding_counts = OUT_DIR + COHORT + "/DEG/coding_counts_" + COHORT + ".tsv",
        coding_deg = OUT_DIR + COHORT + "/DEG/coding_deg.tsv",
        non_coding_deg = OUT_DIR + COHORT + "/DEG/non_coding_deg.tsv",
        pca_png = OUT_DIR + COHORT + "/DEG/coding_genes_pca.png",
        pca_svg = OUT_DIR + COHORT + "/DEG/coding_genes_pca.svg"
    params:
        cohort = COHORT,
        out_dir = OUT_DIR,
        mart = MART,
        l2fc = L2FC,
        alpha_deg = ALPHA_DEG,
        tumor_purity = TUMOR_PURITY
    run:
        shell("Rscript scripts/a_identify_diff_expressed_genes.R --counts {input.counts} \
        --cohort {params.cohort} \
        --design {input.design} \
        --annotation {input.annotation} \
        --out_dir {params.out_dir} \
        --mart {params.mart} \
        --l2fc {params.l2fc} \
        --alpha {params.alpha_deg} \
        --tumor_purity {params.tumor_purity}")

rule hallmark_enrichment:
    input:
        design = DESIGN,
        coding_counts = OUT_DIR + COHORT + "/DEG/coding_counts_" + COHORT + ".tsv",
        coding_deg = OUT_DIR + COHORT + "/DEG/coding_deg.tsv",
        non_coding_deg = OUT_DIR + COHORT + "/DEG/non_coding_deg.tsv"
    output:
        coding_hallmarks = OUT_DIR + COHORT + "/hallmark/coding_genes_hallmarks.tsv",
        ssgsea_coding_hallmarks = OUT_DIR + COHORT + "/hallmark/ssGSEA_coding_genes_hallmarks.tsv",
        #hallmark_png = OUT_DIR + COHORT + "/hallmark/hallmarks_bubble_plot.png",
        #hallmark_svg = OUT_DIR + COHORT + "/hallmark/hallmarks_bubble_plot.svg"
    params:
        cohort = COHORT,
        out_dir = OUT_DIR,
        mart = MART,
        alpha_gsea = ALPHA_GSEA
    run:
        shell("Rscript scripts/b_analyze_hallmark_enrichment.R --coding_counts {input.coding_counts} \
        --cohort {params.cohort} \
        --coding_deg {input.coding_deg} \
        --non_coding_deg {input.non_coding_deg} \
        --design {input.design} \
        --out_dir {params.out_dir} \
        --mart {params.mart} \
        --alpha {params.alpha_gsea}")

rule go_terms:
    input:
        coding_deg = OUT_DIR + COHORT + "/DEG/coding_deg.tsv"
    output:
        go_terms = OUT_DIR + COHORT + "/GO_terms/go_terms.tsv",
        go_terms_png = OUT_DIR + COHORT + "/GO_terms/go_terms.png",
        go_terms_svg = OUT_DIR + COHORT + "/GO_terms/go_terms.svg"
    params:
        cohort = COHORT,
        out_dir = OUT_DIR
    run:
        shell("Rscript scripts/c_analyze_GO_term_enrichment.R --coding_deg {input.coding_deg} \
        --cohort {params.cohort} \
        --out_dir {params.out_dir}")

rule cell_fractions:
    input:
        tpm = TPM,
        design = DESIGN,
        annotation = ANNOTATION
    output:
        epic = OUT_DIR + COHORT + "/deconvolution/EPIC_estimations.tsv",
        quantiseq = OUT_DIR + COHORT + "/deconvolution/quanTIseq_estimations.tsv",
        estimate = OUT_DIR + COHORT + "/deconvolution/ESTIMATE_estimations.tsv",
        mcpcounter = OUT_DIR + COHORT + "/deconvolution/MCPcounter_estimations.tsv"
    params:
        cohort = COHORT,
        out_dir = OUT_DIR
    run:
        shell("Rscript scripts/d_estimate_cell_fractions.R --tpm {input.tpm} \
        --cohort {params.cohort} \
        --design {input.design} \
        --annotation {input.annotation} \
        --out_dir {params.out_dir}")

rule get_gene_symbols_tpm:
    input:
        tpm = TPM
    output:
        symbol_tpm = OUT_DIR + COHORT + "/Bagaev/symbols_tpm_" + COHORT + ".tsv"
    params:
        cohort = COHORT,
        out_dir = OUT_DIR,
        mart = MART
    run:
        shell("Rscript scripts/e_get_gene_symbols_tpm.R --cohort {params.cohort} \
        --tpm {input.tpm} \
        --mart {params.mart} \
        --out_dir {params.out_dir}")

rule get_Bagaev_scores:
    input:
        estimate = OUT_DIR + COHORT + "/deconvolution/ESTIMATE_estimations.tsv",
        symbol_tpm = OUT_DIR + COHORT + "/Bagaev/symbols_tpm_" + COHORT + ".tsv"
    output:
        bagaev_scores = OUT_DIR + COHORT + "/Bagaev/bagaev_signature_scores.tsv"
    params:
        python = PYTHON
    run:
        shell("{params.python} scripts/f_calculate_Bagaev_ssGSEA.py -i {input.symbol_tpm} \
        -o {output.bagaev_scores}")

rule predict_Bagaev_subtype:
    input:
        estimate = OUT_DIR + COHORT + "/deconvolution/ESTIMATE_estimations.tsv",
        symbol_tpm = OUT_DIR + COHORT + "/Bagaev/symbols_tpm_" + COHORT + ".tsv"
    output:
        bagaev_subtype_labels = OUT_DIR + COHORT + "/Bagaev/bagaev_subtype_labels.tsv",
        bagaev_subtype_proba = OUT_DIR + COHORT + "/Bagaev/bagaev_subtype_proba.tsv"
    params:
        python = PYTHON,
        out_dir = OUT_DIR + COHORT + "/Bagaev/"
    run:
        shell("{params.python} scripts/g_predict_immune_subtype_bagaev.py -i {input.symbol_tpm} \
        -o {params.out_dir}")

rule plot_Bagaev_scores:
    input:
        estimate = OUT_DIR + COHORT + "/deconvolution/ESTIMATE_estimations.tsv",
        bagaev_scores = OUT_DIR + COHORT + "/Bagaev/bagaev_signature_scores.tsv",
        bagaev_subtype_labels = OUT_DIR + COHORT + "/Bagaev/bagaev_subtype_labels.tsv",
        design = DESIGN
    output:
        bagaev_plot = OUT_DIR + COHORT + "/Bagaev/heatmap_Bagaev_scores.png" 
    params:
        cohort = COHORT,
        out_dir = OUT_DIR
    run:
        shell("Rscript scripts/h_plot_Bagaev_scores.R --cohort {params.cohort} \
        --bagaev {input.bagaev_scores} \
        --subtypes {input.bagaev_subtype_labels} \
        --design {input.design} \
        --out_dir {params.out_dir}")
